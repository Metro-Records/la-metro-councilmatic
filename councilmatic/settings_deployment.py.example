# These are all the settings that are specific to a deployment

import os

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
]

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'replacethiswithsomethingsecret'

# SECURITY WARNING: don't run with debug turned on in production!
# Set this to True while you are developing
DEBUG = True

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'lametro',
        'USER': 'postgres',
        'HOST': 'postgres',
        'PASSWORD': '',
        'PORT': 5432,
    }
}

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.solr_backend.SolrEngine',
        'URL': 'http://solr:8983/solr/lametro',
        'SILENTLY_FAIL': False,  # Raise Solr errors
        'BATCH_SIZE': 100,  # Reduce the default batch size for index updates
    },
}

# Remember to run python manage.py createcachetable so this will work!
# Developers, set your BACKEND to 'django.core.cache.backends.dummy.DummyCache' to run the app locally
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        'LOCATION': 'councilmatic_cache',
    }
}

# Set this to flush the cache at /flush-cache/{FLUSH_KEY}
FLUSH_KEY = 'super secret junk'

# Set this to allow updating of /refresh-guid/{REFRESH_KEY}
REFRESH_KEY = 'something very secret'

# Set this to allow access to /object-counts/{API_KEY}
API_KEY = 'test key'

# Set this to allow Disqus comments to render
DISQUS_SHORTNAME = None

# analytics tracking code
ANALYTICS_TRACKING_CODE = ''

HEADSHOT_PATH = os.path.join(os.path.dirname(__file__), '..'
                             '/lametro/static/images/')

EXTRA_APPS = ()

# Use standard logging module to catch errors in import_data (which uses a 'logger')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'console': {
            'format': '[%(asctime)s][%(levelname)s] %(name)s '
                      '%(filename)s:%(funcName)s:%(lineno)d | %(message)s',
            'datefmt': '%H:%M:%S',
        },
    },
    'handlers': {

    },

    'loggers': {

    }
}

# Set to False in production!
SHOW_TEST_EVENTS = True

import socket
hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
INTERNAL_IPS = [ip[:-1] + '1' for ip in ips] + ['127.0.0.1', '10.0.2.2']

SMART_LOGIC_KEY = 'smartlogic api key'
SMART_LOGIC_ENVIRONMENT = '0ef5d755-1f43-4a7e-8b06-7591bed8d453'

# Populate and uncomment to add live reCAPTCHA calls (defaults to always valid test calls)
# RECAPTCHA_PUBLIC_KEY = ''
# RECAPTCHA_PRIVATE_KEY = ''

MERGE_HOST = 'https://datamade-metro-pdf-merger-testing.s3.amazonaws.com/'

# Assumes a locally running instance of the dashboard
MERGE_ENDPOINT = 'http://host.docker.internal:8080/api/experimental/dags/make_packet/dag_runs'
