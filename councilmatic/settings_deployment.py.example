# These are all the settings that are specific to a deployment

import os
import sys

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
    "capable-parakeet-noted.ngrok-free.app"
]

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'replacethiswithsomethingsecret'

# SECURITY WARNING: don't run with debug turned on in production!
# Set this to True while you are developing
DEBUG = True

SENTRY_DSN = ""
SENTRY_ENVIRONMENT = "dev"

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'lametro',
        'USER': 'postgres',
        'HOST': 'postgres',
        'PASSWORD': '',
        'PORT': 5432,
    }
}

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch7_backend.Elasticsearch7SearchEngine',
        'URL': 'http://elasticsearch:9200',
        'INDEX_NAME': 'lametro',
        'SILENTLY_FAIL': False,
        'BATCH_SIZE': 10,
    },
}

# Remember to run python manage.py createcachetable so this will work!
# Developers, set your BACKEND to 'django.core.cache.backends.dummy.DummyCache' to run the app locally
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        'LOCATION': 'councilmatic_cache',
    }
}

MEDIA_ROOT = '/media'

# Set this to flush the cache at /flush-cache/{FLUSH_KEY}
FLUSH_KEY = 'super secret junk'

# Set this to allow updating of /refresh-guid/{REFRESH_KEY}
REFRESH_KEY = 'something very secret'

# Set this to allow access to /object-counts/{API_KEY}
API_KEY = 'test key'

# Set this to allow Disqus comments to render
DISQUS_SHORTNAME = None

HEADSHOT_PATH = os.path.join(os.path.dirname(__file__), '..'
                             '/lametro/static/images/')

EXTRA_APPS = ()

# Use standard logging module to catch errors in import_data (which uses a 'logger')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '[%(asctime)s][%(levelname)s] %(name)s '
                      '%(filename)s:%(funcName)s:%(lineno)d | %(message)s',
            'datefmt': '%H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'console',
            'stream': sys.stdout
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG'
    },
    'loggers': {
        'lametro': {
            'handlers': ['console'],
            'propagate': False,
        },
    }
}

# Set to False in production!
SHOW_TEST_EVENTS = True

import socket
hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
INTERNAL_IPS = [ip[:-1] + '1' for ip in ips] + ['127.0.0.1', '10.0.2.2']

SMART_LOGIC_KEY = 'smartlogic api key'
SMART_LOGIC_ENVIRONMENT = 'd3807554-347e-4091-90ea-f107a906aaff'

# Populate and uncomment to add live reCAPTCHA calls (defaults to always valid test calls)
# RECAPTCHA_PUBLIC_KEY = ''
# RECAPTCHA_PRIVATE_KEY = ''

# Django-storages S3 settings
# Uncomment and set secret values in a .env file as documented in the README to enable
# remote storage
# AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
# AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = "la-metro-headshots-staging"

MERGE_HOST = 'https://datamade-metro-pdf-merger-testing.s3.amazonaws.com/'

# Assumes a locally running instance of the dashboard
MERGE_ENDPOINT = 'http://host.docker.internal:8080/api/experimental/dags/make_packet/dag_runs'

# Allow some html tags to render in markdown. Mainly for alerts
MARKDOWNIFY = {
    "default": {
        "WHITELIST_TAGS": [
            "br",
            "strong",
            "em",
            "a",
        ]
    }
}
